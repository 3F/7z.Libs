{
  "Header": {
    "_": [
      " This file for vsSolutionBuildEvent ",
      " https://github.com/3F/vsSolutionBuildEvent "
    ],
    "Compatibility": "0.12.4"
  },
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "Dirs",
      "Caption": "To prepare directories",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[$(dbin = \"bin/Release/\")]",
          "",
          "$(odir = \"$(dbin)raw/\")",
          "",
          "#[IO delete.directory(\"$(dbin)\", true)]",
          "#[IO copy.directory(\"\", \"$(dbin)\", true)]",
          "",
          "#[$(dtmp = \"bin\\\\tmp\\\\\")]",
          "#[IO copy.directory(\"\", \"$(dtmp)\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Vars",
      "Caption": "Define variables ...",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "",
          "$(bin7zX64 = \"x64\")",
          "$(bin7zX86 = \"x86\")",
          "$(bin7zExtra = \"extra\")",
          "",
          "#[var pVer = #[File get(\".version\")]]",
          "#[($(target7zVersion) != *Undefined*){ $(pVer = $(target7zVersion)) }]",
          "",
          "Fix possible newlines when committing through GitHub web editor",
          "https://github.com/3F/7z.Libs/commit/67c83ced",
          "#[$(pVer = $(pVer.Trim()))]",
          "",
          "$(appver = $(pVer.Substring(0, 5))) YY.MM",
          "$(appverL = $(appver.Replace('.', ''))) YYMM",
          "",
          "$(dtmpApp = \"$(dtmp)$(appver)\\\\\")",
          "",
          "",
          "$(revDeltaBase  = \"2020/06/18\")",
          "$(revDeltaMin   = $([System.Math]::Pow(10, 3)))",
          "$(revDeltaMax   = 65534)",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "GetLibs",
      "Caption": "Receiving libraries ...",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var pkgs = #[File get(\".artefacts\")]]",
          "#[var pkgs = $(pkgs.Replace('7z*', '7z$(appverL)').Replace('*', $(appver)))]",
          "",
          "#[$(loop = true)]",
          "#[Box iterate(i = 0; $(loop); i += 1): #[try",
          "{    ",
          "    #[var pkg = #[$(pkgs.Split(\"\\r\"\"\\n\")[$(i)].Trim())]]",
          "    #[try ",
          "    {",
          "        #[( $(pkg) != \"\" ) ",
          "        {",
          "            #[var fz = #[$(pkg.Split(':', 2)[0])]]",
          "            #[IO copy.directory(\"\", \"$(dtmpApp)\", true)]",
          "            ",
          "            #[$(fout = \"$(dtmpApp)$(fz)\")]",
          "            #[( #[IO exists.file(\"$(fout)\")] ) ",
          "            {        ",
          "                #[IO writeLine(STDOUT): Rcv is ignored due to available #[$(fout)]]",
          "            }",
          "            else",
          "            {",
          "                #[var url = #[$(pkg.Split(':', 2)[1])]]",
          "                #[IO writeLine(STDOUT): Rcv #[$(url)] to #[$(fout)] ... ]",
          "            ",
          "                #[File remote.download(\"$(url)\", \"$(fout)\")]",
          "            }]",
          "            ",
          "            #[(! #[IO exists.directory(\"$(fout).d\")] )",
          "            {",
          "                #[try ",
          "                {",
          "                    #[7z unpack(\"$(fout)\", \"$(fout).d\")]",
          "                }",
          "                catch",
          "                {",
          "                    #[IO copy.file(\"$(fout)\", \"$(fout).tar.xz\", true)]",
          "                    #[7z unpack(\"$(fout).tar.xz\", \"$(fout).d\", true)]",
          "                    #[7z unpack(\"$(fout).d\\$(fz).tar\", \"$(fout).d\", true)]",
          "                }]",
          "            }]",
          "            ",
          "        }]",
          "    }",
          "    catch(err, msg){ #[IO writeLine(STDOUT): Rcv failed: #[$(msg)] ] }]",
          "}",
          "catch { $(loop = false) }] ]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "CalcRev",
      "Caption": "Calculate revision ...",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "#[var revBuild  = #[$(",
          "    [System.TimeSpan]::FromTicks('$(",
          "        [MSBuild]::Subtract($(tNow), $(tBase))",
          "    )')",
          "    .TotalMinutes.ToString('0')    ",
          ")]]",
          "                     ",
          "#[var revBuild  = #[$(",
          "",
          " [MSBuild]::Add(",
          "     $(revDeltaMin), ",
          "     $([MSBuild]::Modulo(",
          "         $(revBuild), ",
          "         $([MSBuild]::Subtract(",
          "             $(revDeltaMax), $(revDeltaMin)",
          "          ))",
          "      ))",
          "  )",
          "  ",
          ")]]",
          "",
          "#[\" ",
          "    Checking of the git to define sha1, branch name, etc.",
          "\"]",
          "#[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    ",
          "    #[$(productVersion = \"$(pVer).$(revBuild)+$(bSha1)\")]",
          "}",
          "else {",
          "    #[$(bSha1 = '')]",
          "    #[$(productVersion = \"$(pVer).$(revBuild)\")]",
          "}]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "Asm",
      "Caption": "Prepare data ...",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO copy.file(\"$(dtmpApp)$(bin7zX64).d\\7z.dll\", \"$(odir)\\bin\\x64\\\\\", true)]",
          "#[IO copy.file(\"$(dtmpApp)$(bin7zX86).d\\7z.dll\", \"$(odir)\\bin\\x86\\\\\", true)]",
          "",
          "#[IO copy.file(\"$(dtmpApp)$(bin7zExtra).d\\x64\\7za.dll\", \"$(odir)\\bin\\x64\\\\\", true)]",
          "#[IO copy.file(\"$(dtmpApp)$(bin7zExtra).d\\7za.dll\", \"$(odir)\\bin\\x86\\\\\", true)]",
          "",
          "#[IO copy.file(\"$(dtmpApp)$(bin7zExtra).d\\x64\\7zxa.dll\", \"$(odir)\\bin\\x64\\\\\", true)]",
          "#[IO copy.file(\"$(dtmpApp)$(bin7zExtra).d\\7zxa.dll\", \"$(odir)\\bin\\x86\\\\\", true)]",
          "",
          "#[IO copy.file(\"$(dtmpApp)$(bin7zX64).d\\License.txt\", \"$(odir)\\bin\\\\\", true)]",
          "#[IO copy.file(\"$(dtmpApp)$(bin7zExtra).d\\License.txt\", \"$(odir)\\bin\\\\License.7za-7zxa.txt\", true)]",
          "",
          "#[\" -  - \"]",
          "",
          "#[IO copy.file(",
          "{ ",
          "    \"Readme.md\", ",
          "    \"changelog.txt\", ",
          "    \"3rd-party-NOTICES.txt\", ",
          "    \"License.txt\",",
          "    \".tools/7z.Libs.nuspec\"",
          "}, ",
          "\"$(odir)\", true)]",
          "",
          "#[File write(\"$(odir).version\"):#[$(pVer)]]",
          "",
          "#[File replace(\"$(odir)/7z.Libs.nuspec\", \"$-version-$\", \"$(pVer)\")]",
          "",
          "#[var buildInfo =  $([System.String]::Concat(\"  \"))",
          "    7z.Libs #[$(productVersion)]",
          "    ",
          "    :: generated by a vsSolutionBuildEvent #[$(vsSolutionBuildEvent)]",
          "]",
          "",
          "#[IO writeLine(\"$(odir)/build-info.txt\"):#[var buildInfo]]",
          "",
          "#[File replace(\"$(odir)/7z.Libs.nuspec\", \"{build-info}\", \"$(buildInfo)\")]",
          "#[IO copy.file(\".tools\\*.*\" , \"$(odir)tools/\", true, { \"7z.Libs.nuspec\" })]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Nupkg",
      "Caption": "Prepare 7z.Libs for NuGet",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "",
          "#[\" https://github.com/3F/DllExport/issues/36 \"]",
          "#[IO copy.directory(\"\", \"$(odir)/lib/net/\", true)]",
          "#[IO write(\"$(odir)/lib/net/_._\"):]",
          "",
          "#[IO copy.directory(\"\", \"$(odir)/lib/netcoreapp/\", true)]",
          "#[IO write(\"$(odir)/lib/netcoreapp/_._\"):]",
          "",
          "#[IO copy.directory(\"\", \"$(odir)/lib/netstandard/\", true)]",
          "#[IO write(\"$(odir)/lib/netstandard/_._\"):]",
          "",
          "#[IO copy.directory(\".tools\", \"$(odir)tools\", true, true)]",
          "",
          "#[\" -  - \"]",
          "",
          "#[IO copy.directory(\"\", \"$(odir)build\\native\", true)]",
          "#[IO copy.file(\"7z.Libs.native.targets\", \"$(odir)build\\native/7z.Libs.targets\", true)]",
          "",
          "#[IO copy.directory(\"\", \"$(odir)build\\net\", true)]",
          "#[IO copy.file(\"7z.Libs.net.targets\", \"$(odir)build\\net/7z.Libs.targets\", true)]",
          "",
          "#[IO copy.directory(\"\", \"$(odir)build\\netcoreapp\", true)]",
          "#[IO copy.file(\"7z.Libs.net.targets\", \"$(odir)build\\netcoreapp/7z.Libs.targets\", true)]",
          "",
          "#[IO copy.directory(\"\", \"$(odir)build\\netstandard\", true)]",
          "#[IO copy.file(\"7z.Libs.net.targets\", \"$(odir)build\\netstandard/7z.Libs.targets\", true)]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Pack",
      "Caption": "Creating nuget package ...",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[NuGet gnt.raw(\"/t:pack /p:ngin=$(odir) /p:ngout=$(dbin)\")]"
        ]
      }
    }
  ]
}